import { PrismaService } from '../prisma/prisma.service';
import { UserRole } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

export async function seedUsers(prisma: PrismaService) {
  console.log('Seeding users...');

  // Get departments
  const computerScienceDept = await prisma.department.findFirst({
    where: { name: 'Computer Science' }
  });
  
  const businessDept = await prisma.department.findFirst({
    where: { name: 'Business Administration' }
  });

  if (!computerScienceDept || !businessDept) {
    throw new Error('Required departments not found. Please run departments seed first.');
  }

  // Create admin user
  const admin = await prisma.user.upsert({
    where: { email: 'admin@isakwa.edu' },
    update: {},
    create: {
      email: 'admin@isakwa.edu',
      password: await bcrypt.hash('admin123', 10),
      firstName: 'Admin',
      lastName: 'User',
      role: UserRole.ADMIN,
      isActive: true,
    },
  });
  console.log('Admin user created:', admin.email);

  // Create professor users
  const professors = [
    {
      email: 'john.smith@isakwa.edu',
      firstName: 'John',
      lastName: 'Smith',
      title: 'Associate Professor',
      department: computerScienceDept,
      phoneNumber: '+381-11-123-4567',
      officeRoom: 'A-101',
    },
    {
      email: 'sarah.johnson@isakwa.edu',
      firstName: 'Sarah',
      lastName: 'Johnson',
      title: 'Professor',
      department: businessDept,
      phoneNumber: '+381-11-123-4568',
      officeRoom: 'B-101',
    },
  ];

  for (const profData of professors) {
    const professor = await prisma.user.upsert({
      where: { email: profData.email },
      update: {},
      create: {
        email: profData.email,
        password: await bcrypt.hash('professor123', 10),
        firstName: profData.firstName,
        lastName: profData.lastName,
        role: UserRole.PROFESSOR,
        isActive: true,
      },
    });

    await prisma.professorProfile.upsert({
      where: { userId: professor.id },
      update: {},
      create: {
        userId: professor.id,
        departmentId: profData.department.id,
        title: profData.title,
        phoneNumber: profData.phoneNumber,
        officeRoom: profData.officeRoom,
      },
    });
    console.log('Professor created:', professor.email);
  }

  // Create student users with proper IDs and study programs
  const students = [
    {
      email: 'marija.stankovic@isakwa.edu',
      firstName: 'Marija',
      lastName: 'Stanković',
      studentIndex: '2024/001',
      year: 1,
      phoneNumber: '+381-11-111-1111',
      studyProgramName: 'Information Technology',
    },
    {
      email: 'petar.mitrovic@isakwa.edu',
      firstName: 'Petar',
      lastName: 'Mitrović',
      studentIndex: '2024/002',
      year: 1,
      phoneNumber: '+381-11-222-2222',
      studyProgramName: 'Information Technology',
    },
    {
      email: 'ana.jovanovic@isakwa.edu',
      firstName: 'Ana',
      lastName: 'Jovanović',
      studentIndex: '2024/003',
      year: 2,
      phoneNumber: '+381-11-333-3333',
      studyProgramName: 'Business Economics',
    },
    {
      email: 'nikola.djordjevic@isakwa.edu',
      firstName: 'Nikola',
      lastName: 'Đorđević',
      studentIndex: '2024/004',
      year: 2,
      phoneNumber: '+381-11-444-4444',
      studyProgramName: 'Software Engineering',
    },
    {
      email: 'marko.petrovic@isakwa.edu',
      firstName: 'Marko',
      lastName: 'Petrović',
      studentIndex: '2024/005',
      year: 3,
      phoneNumber: '+381-11-555-5555',
      studyProgramName: 'Software Engineering',
    },
  ];

  for (const studentData of students) {
    // Get study program
    const studyProgram = await prisma.studyProgram.findFirst({
      where: { name: studentData.studyProgramName }
    });

    if (!studyProgram) {
      console.warn(`Study program ${studentData.studyProgramName} not found for ${studentData.email}`);
      continue;
    }

    const student = await prisma.user.upsert({
      where: { email: studentData.email },
      update: {},
      create: {
        email: studentData.email,
        password: await bcrypt.hash('student123', 10),
        firstName: studentData.firstName,
        lastName: studentData.lastName,
        role: UserRole.STUDENT,
        isActive: true,
      },
    });

    await prisma.studentProfile.upsert({
      where: { userId: student.id },
      update: {},
      create: {
        userId: student.id,
        studentIndex: studentData.studentIndex,
        year: studentData.year,
        phoneNumber: studentData.phoneNumber,
        studyProgramId: studyProgram.id,
        enrollmentYear: '2024',
        status: 'ACTIVE',
      },
    });
    console.log('Student created:', student.email, `(ID: ${student.id})`);
  }

  // Create student service users
  const studentServiceUsers = [
    {
      email: 'service@isakwa.edu',
      firstName: 'Service',
      lastName: 'Staff',
      position: 'Student Coordinator',
      phoneNumber: '+381-11-777-7777',
      officeRoom: 'B-201',
      department: businessDept,
    },
    {
      email: 'coordinator@isakwa.edu',
      firstName: 'Coordinator',
      lastName: 'User',
      position: 'Academic Coordinator',
      phoneNumber: '+381-11-888-8888',
      officeRoom: 'B-202',
      department: computerScienceDept,
    },
  ];

  for (const userData of studentServiceUsers) {
    const user = await prisma.user.upsert({
      where: { email: userData.email },
      update: {},
      create: {
        email: userData.email,
        password: await bcrypt.hash('service123', 10),
        firstName: userData.firstName,
        lastName: userData.lastName,
        role: UserRole.STUDENT_SERVICE,
        isActive: true,
      },
    });

    await prisma.studentServiceProfile.upsert({
      where: { userId: user.id },
      update: {},
      create: {
        userId: user.id,
        departmentId: userData.department.id,
        position: userData.position,
        phoneNumber: userData.phoneNumber,
        officeRoom: userData.officeRoom,
      },
    });
    console.log('Student service user created:', user.email);
  }

  console.log('Users seeding completed!');
}
