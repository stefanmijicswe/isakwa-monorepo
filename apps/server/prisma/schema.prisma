// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PROFESSOR
  STUDENT
  STUDENT_SERVICE
}

enum SemesterType {
  WINTER
  SUMMER
}

enum ExamStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum TeachingType {
  LECTURE
  EXERCISE
  LABORATORY
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  INTERRUPTED
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacije specifične za ulogu
  profesorProfile ProfessorProfile?
  studentProfile  StudentProfile?

  @@map("users")
}

model ProfessorProfile {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  department  String
  title       String // Dr, Prof, Asistent, itd.
  phoneNumber String?
  officeRoom  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("professor_profiles")
}

model StudentProfile {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  studentIndex String        @unique
  year         Int
  program      String
  phoneNumber  String?
  status       StudentStatus @default(ACTIVE)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacije
  enrollments       CourseEnrollment[]
  examRegistrations ExamRegistration[]
  grades            Grade[]

  @@map("student_profiles")
}

// Lokacije i adrese
model City {
  id       Int    @id @default(autoincrement())
  name     String
  zipCode  String
  
  addresses Address[]

  @@map("cities")
}

model Address {
  id       Int    @id @default(autoincrement())
  street   String
  number   String
  cityId   Int
  
  city         City           @relation(fields: [cityId], references: [id])
  universities University[]
  faculties    Faculty[]

  @@map("addresses")
}

// Osnovni entiteti za strukturu univerziteta
model University {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  addressId   Int?
  phone       String?
  email       String?
  website     String?
  rectorName  String?
  rectorTitle String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  address   Address?  @relation(fields: [addressId], references: [id])
  faculties Faculty[]

  @@map("universities")
}

model Faculty {
  id           Int      @id @default(autoincrement())
  universityId Int
  name         String
  description  String?
  addressId    Int?
  phone        String?
  email        String?
  deanName     String?
  deanTitle    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  university     University      @relation(fields: [universityId], references: [id], onDelete: Cascade)
  address        Address?        @relation(fields: [addressId], references: [id])
  studyPrograms  StudyProgram[]

  @@map("faculties")
}

model StudyProgram {
  id               Int      @id @default(autoincrement())
  facultyId        Int
  name             String
  description      String?
  duration         Int      // broj godina
  directorName     String?
  directorTitle    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  faculty  Faculty   @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  subjects Subject[]

  @@map("study_programs")
}

model Subject {
  id             Int      @id @default(autoincrement())
  studyProgramId Int
  name           String
  code           String   @unique
  description    String?
  credits        Int      // ECTS bodovi
  semester       Int      // koji semestar
  lectureHours   Int      @default(0)
  exerciseHours  Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  studyProgram StudyProgram @relation(fields: [studyProgramId], references: [id], onDelete: Cascade)
  
  // Relacije
  courses CourseEnrollment[]
  exams Exam[]

  @@map("subjects")
}

// Sistem za upis na predmete
model CourseEnrollment {
  id             Int      @id @default(autoincrement())
  studentId      Int
  subjectId      Int
  academicYear   String   // npr. "2024/2025"
  semesterType   SemesterType
  enrollmentDate DateTime @default(now())
  isActive       Boolean  @default(true)

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId, academicYear])
  @@map("course_enrollments")
}

// Sistem za ispite
model ExamPeriod {
  id          Int      @id @default(autoincrement())
  name        String
  startDate   DateTime
  endDate     DateTime
  academicYear String
  semesterType SemesterType
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  exams Exam[]

  @@map("exam_periods")
}

model Exam {
  id           Int        @id @default(autoincrement())
  subjectId    Int
  examPeriodId Int
  examDate     DateTime
  examTime     String     // npr. "09:00"
  duration     Int        // u minutima
  location     String?
  maxPoints    Int        @default(100)
  status       ExamStatus @default(SCHEDULED)
  createdAt    DateTime   @default(now())

  subject    Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  examPeriod ExamPeriod @relation(fields: [examPeriodId], references: [id], onDelete: Cascade)
  
  registrations ExamRegistration[]
  grades Grade[]

  @@map("exams")
}

model ExamRegistration {
  id              Int      @id @default(autoincrement())
  studentId       Int
  examId          Int
  registrationDate DateTime @default(now())
  isActive        Boolean  @default(true)

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam    Exam @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@unique([studentId, examId])
  @@map("exam_registrations")
}

// Sistem za ocene
model Grade {
  id          Int      @id @default(autoincrement())
  studentId   Int
  examId      Int
  points      Int      // osvojeni bodovi
  grade       Int?     // ocena (6-10)
  passed      Boolean  @default(false)
  attempt     Int      @default(1) // broj pokušaja
  gradedAt    DateTime @default(now())
  gradedBy    Int?     // ID profesora koji je dao ocenu

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam    Exam @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@map("grades")
}
